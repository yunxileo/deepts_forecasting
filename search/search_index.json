{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DeepTS_Forecasting \u00b6 Deepts_forecasting is a Easy-to-use package for time series forecasting with deep Learning models. It contains a variety of models, from classics such as ARIMA to deep neural networks. The models can all be used in the same way, using fit() and predict() functions, Free software: MIT Documentation \u00b6 https://deepts-forecasting.readthedocs.io Features \u00b6 TODO Models list \u00b6 Model Paper Seq2Seq Sequence to Sequence Learning with Neural Networks DeepAR DeepAR: Probabilistic Forecasting with Autoregressive Recurrent Networks Lstnet Modeling Long- and Short-Term Temporal Patterns with Deep Neural Networks MQ-RNN A Multi-Horizon Quantile Recurrent Forecaster N-Beats N-BEATS: Neural basis expansion analysis for interpretable time series forecasting TCN An empirical evaluation of generic convolutional and recurrent networks for sequence modeling Transformer Attention Is All You Need Informer Informer: Beyond Efficient Transformer for Long Sequence Time-Series Forecasting Autoformer Autoformer: Decomposition Transformers with Auto-Correlation for Long-Term Series Forecasting TFT Temporal Fusion Transformers for Interpretable Multi-horizon Time Series Forecasting MAE Masked Autoencoders Are Scalable Vision Learners LICENSE \u00b6 This project is licensed under the MIT License - see the LICENSE file for details. Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#deepts_forecasting","text":"Deepts_forecasting is a Easy-to-use package for time series forecasting with deep Learning models. It contains a variety of models, from classics such as ARIMA to deep neural networks. The models can all be used in the same way, using fit() and predict() functions, Free software: MIT","title":"DeepTS_Forecasting"},{"location":"#documentation","text":"https://deepts-forecasting.readthedocs.io","title":"Documentation"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#models-list","text":"Model Paper Seq2Seq Sequence to Sequence Learning with Neural Networks DeepAR DeepAR: Probabilistic Forecasting with Autoregressive Recurrent Networks Lstnet Modeling Long- and Short-Term Temporal Patterns with Deep Neural Networks MQ-RNN A Multi-Horizon Quantile Recurrent Forecaster N-Beats N-BEATS: Neural basis expansion analysis for interpretable time series forecasting TCN An empirical evaluation of generic convolutional and recurrent networks for sequence modeling Transformer Attention Is All You Need Informer Informer: Beyond Efficient Transformer for Long Sequence Time-Series Forecasting Autoformer Autoformer: Decomposition Transformers with Auto-Correlation for Long-Term Series Forecasting TFT Temporal Fusion Transformers for Interpretable Multi-horizon Time Series Forecasting MAE Masked Autoencoders Are Scalable Vision Learners","title":"Models list"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"LICENSE"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"::: deepts_forecasting","title":"modules"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Will Wei weiwillstat@163.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Will Wei weiwillstat@163.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/yunxileo/deepts_forecasting/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 DeepTS_Forecasting could always use more documentation, whether as part of the official DeepTS_Forecasting docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/yunxileo/deepts_forecasting/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up deepts_forecasting for local development. Fork the deepts_forecasting repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/deepts_forecasting.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and for PyPy. Check https://github.com/yunxileo/deepts_forecasting/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 To run a subset of tests. 1 $ pytest tests.test_deepts_forecasting Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/yunxileo/deepts_forecasting/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"DeepTS_Forecasting could always use more documentation, whether as part of the official DeepTS_Forecasting docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/yunxileo/deepts_forecasting/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up deepts_forecasting for local development. Fork the deepts_forecasting repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/deepts_forecasting.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and for PyPy. Check https://github.com/yunxileo/deepts_forecasting/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests. 1 $ pytest tests.test_deepts_forecasting","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2022-04-20) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2022-04-20","text":"First release on PyPI.","title":"0.1.0 (2022-04-20)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install DeepTS_Forecasting, run this command in your terminal: 1 $ pip install deepts_forecasting This is the preferred method to install DeepTS_Forecasting, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for DeepTS_Forecasting can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/yunxileo/deepts_forecasting Or download the tarball : 1 $ curl -OJL https://github.com/yunxileo/deepts_forecasting/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install DeepTS_Forecasting, run this command in your terminal: 1 $ pip install deepts_forecasting This is the preferred method to install DeepTS_Forecasting, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for DeepTS_Forecasting can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/yunxileo/deepts_forecasting Or download the tarball : 1 $ curl -OJL https://github.com/yunxileo/deepts_forecasting/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use DeepTS_Forecasting in a project 1 import deepts_forecasting","title":"usage"},{"location":"usage/#usage","text":"To use DeepTS_Forecasting in a project 1 import deepts_forecasting","title":"Usage"}]}